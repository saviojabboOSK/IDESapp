# Pydantic data models for graph configurations, chart settings, and sensor data structures used in dashboard visualization with validation and serialization.

from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
from datetime import datetime
from enum import Enum

class ChartType(str, Enum):
    """Supported chart types for data visualization."""
    LINE = "line"
    AREA = "area"
    BAR = "bar"
    SCATTER = "scatter"
    PIE = "pie"

class TimeRange(str, Enum):
    """Supported time ranges for data queries."""
    HOUR_1 = "1h"
    HOUR_6 = "6h"
    HOUR_12 = "12h"
    HOUR_24 = "24h"
    DAY_7 = "7d"
    DAY_30 = "30d"
    CUSTOM = "custom"  # For custom time ranges

class GraphSettings(BaseModel):
    """Configuration settings for graph appearance and behavior."""
    color_scheme: List[str] = Field(default=["#3b82f6", "#ef4444"], description="Chart color palette")
    show_legend: bool = Field(default=True, description="Display chart legend")
    show_grid: bool = Field(default=True, description="Display grid lines")
    animate: bool = Field(default=True, description="Enable animations")
    smooth_lines: bool = Field(default=True, description="Smooth line interpolation")
    fill_area: bool = Field(default=False, description="Fill area under lines")
    show_points: bool = Field(default=False, description="Show data points on lines")
    y_axis_min: Optional[float] = Field(default=None, description="Y-axis minimum value")
    y_axis_max: Optional[float] = Field(default=None, description="Y-axis maximum value")
    
class GraphData(BaseModel):
    """Container for graph data points."""
    timestamps: List[str] = Field(default_factory=list, description="ISO timestamp strings")
    values: Dict[str, List[float]] = Field(default_factory=dict, description="Metric values by name")
    forecast_data: Optional[Dict[str, List[float]]] = Field(default=None, description="Predicted values")
    accuracy_metrics: Optional[Dict[str, float]] = Field(default=None, description="Forecast accuracy (MAE, RMSE)")

class GraphLayout(BaseModel):
    """Layout configuration for dashboard grid positioning."""
    x: int = Field(default=0, description="Grid X position")
    y: int = Field(default=0, description="Grid Y position")
    width: int = Field(default=4, description="Grid width units")
    height: int = Field(default=3, description="Grid height units")

class SensorSelection(BaseModel):
    """Sensor selection for multi-sensor graphs."""
    sensor_id: str = Field(..., description="Sensor identifier")
    metrics: List[str] = Field(default_factory=list, description="Selected metrics for this sensor")
    
class GraphModel(BaseModel):
    """Complete graph configuration model for dashboard charts."""
    id: str = Field(..., description="Unique graph identifier")
    title: str = Field(..., description="Graph display title")
    chart_type: ChartType = Field(default=ChartType.LINE, description="Chart visualization type")
    
    # New sensor-based structure
    sensor_id: Optional[str] = Field(default=None, description="Selected sensor ID")
    sensors: Optional[List[SensorSelection]] = Field(default=None, description="Multi-sensor selections")
    metrics: List[str] = Field(..., description="List of sensor metrics to display")
    
    # Time range with custom options
    time_range: TimeRange = Field(default=TimeRange.HOUR_24, description="Data time range")
    custom_start_time: Optional[datetime] = Field(default=None, description="Custom start time for data query")
    custom_end_time: Optional[datetime] = Field(default=None, description="Custom end time for data query")
    
    settings: GraphSettings = Field(default_factory=GraphSettings, description="Graph appearance settings")
    layout: GraphLayout = Field(default_factory=GraphLayout, description="Dashboard layout position")
    data: Optional[GraphData] = Field(default=None, description="Current graph data")
    
    # Additional metadata
    created_at: datetime = Field(default_factory=datetime.now, description="Creation timestamp")
    updated_at: datetime = Field(default_factory=datetime.now, description="Last update timestamp") 
    is_ai_generated: bool = Field(default=False, description="Generated by AI prompt")
    auto_refresh: bool = Field(default=True, description="Auto-refresh with new data")
    refresh_interval: int = Field(default=30, description="Refresh interval in seconds")
    
    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }

class GraphCreateRequest(BaseModel):
    """Request model for creating new graphs."""
    title: str
    chart_type: ChartType = ChartType.LINE
    sensor_id: Optional[str] = None  # New field for sensor selection
    metrics: List[str]
    time_range: TimeRange = TimeRange.HOUR_24
    custom_start_time: Optional[datetime] = None
    custom_end_time: Optional[datetime] = None
    settings: Optional[GraphSettings] = None
    layout: Optional[GraphLayout] = None

class GraphUpdateRequest(BaseModel):
    """Request model for updating existing graphs."""
    title: Optional[str] = None
    chart_type: Optional[ChartType] = None
    sensor_id: Optional[str] = None  # New field for sensor selection
    metrics: Optional[List[str]] = None
    time_range: Optional[TimeRange] = None
    custom_start_time: Optional[datetime] = None
    custom_end_time: Optional[datetime] = None
    settings: Optional[GraphSettings] = None
    layout: Optional[GraphLayout] = None
    auto_refresh: Optional[bool] = None
    refresh_interval: Optional[int] = None

# New models for sensor management
class SensorInfo(BaseModel):
    """Information about a sensor device."""
    id: str = Field(..., description="Unique sensor identifier")
    mac_address: str = Field(..., description="MAC address or topic string")
    nickname: Optional[str] = Field(default=None, description="User-friendly name")
    location: Optional[str] = Field(default=None, description="Physical location")
    model: Optional[str] = Field(default=None, description="Sensor model/type")
    installed_at: Optional[datetime] = Field(default=None, description="Installation timestamp")
    last_seen: Optional[datetime] = Field(default=None, description="Last data received")
    is_active: bool = Field(default=True, description="Sensor status")
    available_metrics: List[str] = Field(default_factory=list, description="Available sensor metrics")

class SensorData(BaseModel):
    """Sensor data structure for the new format."""
    sensor_id: str = Field(..., description="Sensor identifier")
    timestamps: List[str] = Field(default_factory=list, description="ISO timestamp strings")
    values: Dict[str, List[float]] = Field(default_factory=dict, description="Metric values by name")

class SensorDataResponse(BaseModel):
    """Response model for sensor data queries."""
    sensor: SensorInfo = Field(..., description="Sensor information")
    data: SensorData = Field(..., description="Sensor data")
    total_points: int = Field(..., description="Total data points")
    time_range: Dict[str, str] = Field(..., description="Actual time range of data")

class MetricInfo(BaseModel):
    """Information about available sensor metrics."""
    name: str = Field(..., description="Metric identifier")
    display_name: str = Field(..., description="Human-readable name")
    unit: str = Field(..., description="Unit of measurement")
    description: str = Field(..., description="Metric description")
    data_type: str = Field(default="float", description="Data type (float, int, bool)")
    min_value: Optional[float] = Field(default=None, description="Expected minimum value")
    max_value: Optional[float] = Field(default=None, description="Expected maximum value")
    
class DashboardLayout(BaseModel):
    """Complete dashboard layout configuration."""
    graphs: List[GraphModel] = Field(default_factory=list, description="Dashboard graphs")
    grid_columns: int = Field(default=12, description="Grid system columns")
    grid_rows: int = Field(default=8, description="Grid system rows")
    auto_arrange: bool = Field(default=False, description="Automatic graph arrangement")
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)